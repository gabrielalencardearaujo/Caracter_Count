(()=>{var n={234:(n,t,e)=>{"use strict";e.d(t,{Z:()=>s});var r=e(537),o=e.n(r),a=e(645),i=e.n(a)()(o());i.push([n.id,".allDiv {\n  text-align: start;\n  padding: 10px;\n}\n\n.opcoes {\n  margin: 5px 0px;\n}\n\n.opcoes>input {\n  width: auto;\n  font-size: 1.3em;\n  border: 1px solid black;\n  padding: 5px 0px;\n  border-radius: 6px;\n}\n\n.divBTN  {\n  text-align: end;\n  padding: 10px;\n}\n\n.btn {\n  font-size: 1.5em;\n  padding: 10px 15px;\n  margin-top: 15px;\n  background-color: lightblue;\n  font-weight: bold;\n  color: var(--primary-color-darker);\n  border: none;\n  border-radius: 10px;\n  box-shadow: 2px 2px 10px 5px rgba(0, 0, 0, .1);\n}\n\n.btn:hover{\n  cursor: pointer;\n}\n\n#itext {\n  width: 200px;\n  font-size: 1em;\n  border-radius: 3px;\n}\n\n#itext:focus{\n  border: 2px solid var(--primary-color-darker);\n}\n\n.numbers {\n  color: rgb(87, 87, 247);\n}\n\n/* RESULTADO */\n.result{\n  display: block;\n  text-align: center;\n  margin-top: 20px;\n}\n\n.result > input{\n  height: 40px;\n}\n\n#iresult{\n  font-size: 1.7em;\n  width: 200px;\n  text-align: center;\n}","",{version:3,sources:["webpack://./src/assets/css/styleCounter.css"],names:[],mappings:"AAAA;EACE,iBAAiB;EACjB,aAAa;AACf;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,WAAW;EACX,gBAAgB;EAChB,uBAAuB;EACvB,gBAAgB;EAChB,kBAAkB;AACpB;;AAEA;EACE,eAAe;EACf,aAAa;AACf;;AAEA;EACE,gBAAgB;EAChB,kBAAkB;EAClB,gBAAgB;EAChB,2BAA2B;EAC3B,iBAAiB;EACjB,kCAAkC;EAClC,YAAY;EACZ,mBAAmB;EACnB,8CAA8C;AAChD;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,YAAY;EACZ,cAAc;EACd,kBAAkB;AACpB;;AAEA;EACE,6CAA6C;AAC/C;;AAEA;EACE,uBAAuB;AACzB;;AAEA,cAAc;AACd;EACE,cAAc;EACd,kBAAkB;EAClB,gBAAgB;AAClB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,gBAAgB;EAChB,YAAY;EACZ,kBAAkB;AACpB",sourcesContent:[".allDiv {\n  text-align: start;\n  padding: 10px;\n}\n\n.opcoes {\n  margin: 5px 0px;\n}\n\n.opcoes>input {\n  width: auto;\n  font-size: 1.3em;\n  border: 1px solid black;\n  padding: 5px 0px;\n  border-radius: 6px;\n}\n\n.divBTN  {\n  text-align: end;\n  padding: 10px;\n}\n\n.btn {\n  font-size: 1.5em;\n  padding: 10px 15px;\n  margin-top: 15px;\n  background-color: lightblue;\n  font-weight: bold;\n  color: var(--primary-color-darker);\n  border: none;\n  border-radius: 10px;\n  box-shadow: 2px 2px 10px 5px rgba(0, 0, 0, .1);\n}\n\n.btn:hover{\n  cursor: pointer;\n}\n\n#itext {\n  width: 200px;\n  font-size: 1em;\n  border-radius: 3px;\n}\n\n#itext:focus{\n  border: 2px solid var(--primary-color-darker);\n}\n\n.numbers {\n  color: rgb(87, 87, 247);\n}\n\n/* RESULTADO */\n.result{\n  display: block;\n  text-align: center;\n  margin-top: 20px;\n}\n\n.result > input{\n  height: 40px;\n}\n\n#iresult{\n  font-size: 1.7em;\n  width: 200px;\n  text-align: center;\n}"],sourceRoot:""}]);const s=i},953:(n,t,e)=>{"use strict";e.d(t,{Z:()=>s});var r=e(537),o=e.n(r),a=e(645),i=e.n(a)()(o());i.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=IBM+Plex+Mono:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;1,100;1,200;1,300;1,400;1,500;1,600;1,700&display=swap);"]),i.push([n.id,":root {\n  --primary-color: rgb(17, 86, 102);\n  --primary-color-darker: rgb(9, 48, 56);\n  --font-family: 'IBM Plex Mono', monospace;\n}\n\n* {\n  box-sizing: border-box;\n  outline: 0;\n  margin: 0px;\n  font-family: var(--font-family);\n}\n\nbody {\n  margin: 0;\n  padding: 10px;\n  background: var(--primary-color);\n  font-family: 'Open sans', sans-serif;\n  font-size: 1.3em;\n  line-height: 1.5em;\n  overflow-x: hidden;\n}\n\n.container {\n  max-width: 1200px;\n  margin: 50px auto;\n  background: #fff;\n  padding: 20px;\n  border-radius: 10px;\n  text-align: center;\n}\n\nh1 {\n  text-align: center;\n}\n\ntextarea {\n  resize: none;\n  width: 95%;\n  border-radius: 10px;\n  font-size: 0.8em;\n  padding: 10px;\n  margin: 20px 0px 5px 0px;\n}\n\nheader {\n  height: 80px;\n  width: 100vw;\n  margin-left: -10px;\n  margin-top: -10px;\n  background-color: var(--primary-color-darker);\n  display: grid;\n  align-items: center;\n}\n\nheader ul {\n  display: flex;\n  gap: 40px;\n  justify-content: center;\n  align-items: center;\n  padding-left: 0;\n}\n\nheader ul li {\n  list-style: none;\n}\n\nheader ul li a {\n  color: #fff;\n  text-decoration: none;\n}\n\nheader ul li a.active {\n  text-decoration: underline;\n}\n\nheader ul li a:hover {\n  text-decoration: underline;\n}\n\n/* ALERTS */\n\n.alertas{\n  display: none;\n  text-align: center;\n  color: tomato;\n  font-style: italic;\n  font-size: .8em;\n  font-weight: 500;\n  margin: 15px auto;\n  max-width: 60%;\n  background-color: rgb(250, 216, 210);\n  border-radius: 4px;\n}","",{version:3,sources:["webpack://./src/assets/css/styleGeral.css"],names:[],mappings:"AAEA;EACE,iCAAiC;EACjC,sCAAsC;EACtC,yCAAyC;AAC3C;;AAEA;EACE,sBAAsB;EACtB,UAAU;EACV,WAAW;EACX,+BAA+B;AACjC;;AAEA;EACE,SAAS;EACT,aAAa;EACb,gCAAgC;EAChC,oCAAoC;EACpC,gBAAgB;EAChB,kBAAkB;EAClB,kBAAkB;AACpB;;AAEA;EACE,iBAAiB;EACjB,iBAAiB;EACjB,gBAAgB;EAChB,aAAa;EACb,mBAAmB;EACnB,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,YAAY;EACZ,UAAU;EACV,mBAAmB;EACnB,gBAAgB;EAChB,aAAa;EACb,wBAAwB;AAC1B;;AAEA;EACE,YAAY;EACZ,YAAY;EACZ,kBAAkB;EAClB,iBAAiB;EACjB,6CAA6C;EAC7C,aAAa;EACb,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,SAAS;EACT,uBAAuB;EACvB,mBAAmB;EACnB,eAAe;AACjB;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,WAAW;EACX,qBAAqB;AACvB;;AAEA;EACE,0BAA0B;AAC5B;;AAEA;EACE,0BAA0B;AAC5B;;AAEA,WAAW;;AAEX;EACE,aAAa;EACb,kBAAkB;EAClB,aAAa;EACb,kBAAkB;EAClB,eAAe;EACf,gBAAgB;EAChB,iBAAiB;EACjB,cAAc;EACd,oCAAoC;EACpC,kBAAkB;AACpB",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=IBM+Plex+Mono:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;1,100;1,200;1,300;1,400;1,500;1,600;1,700&display=swap');\n\n:root {\n  --primary-color: rgb(17, 86, 102);\n  --primary-color-darker: rgb(9, 48, 56);\n  --font-family: 'IBM Plex Mono', monospace;\n}\n\n* {\n  box-sizing: border-box;\n  outline: 0;\n  margin: 0px;\n  font-family: var(--font-family);\n}\n\nbody {\n  margin: 0;\n  padding: 10px;\n  background: var(--primary-color);\n  font-family: 'Open sans', sans-serif;\n  font-size: 1.3em;\n  line-height: 1.5em;\n  overflow-x: hidden;\n}\n\n.container {\n  max-width: 1200px;\n  margin: 50px auto;\n  background: #fff;\n  padding: 20px;\n  border-radius: 10px;\n  text-align: center;\n}\n\nh1 {\n  text-align: center;\n}\n\ntextarea {\n  resize: none;\n  width: 95%;\n  border-radius: 10px;\n  font-size: 0.8em;\n  padding: 10px;\n  margin: 20px 0px 5px 0px;\n}\n\nheader {\n  height: 80px;\n  width: 100vw;\n  margin-left: -10px;\n  margin-top: -10px;\n  background-color: var(--primary-color-darker);\n  display: grid;\n  align-items: center;\n}\n\nheader ul {\n  display: flex;\n  gap: 40px;\n  justify-content: center;\n  align-items: center;\n  padding-left: 0;\n}\n\nheader ul li {\n  list-style: none;\n}\n\nheader ul li a {\n  color: #fff;\n  text-decoration: none;\n}\n\nheader ul li a.active {\n  text-decoration: underline;\n}\n\nheader ul li a:hover {\n  text-decoration: underline;\n}\n\n/* ALERTS */\n\n.alertas{\n  display: none;\n  text-align: center;\n  color: tomato;\n  font-style: italic;\n  font-size: .8em;\n  font-weight: 500;\n  margin: 15px auto;\n  max-width: 60%;\n  background-color: rgb(250, 216, 210);\n  border-radius: 4px;\n}"],sourceRoot:""}]);const s=i},236:(n,t,e)=>{"use strict";e.d(t,{Z:()=>s});var r=e(537),o=e.n(r),a=e(645),i=e.n(a)()(o());i.push([n.id,".divInputRegex {\n  text-align: start;\n}\n\n#inputRegex {\n  width: 50%;\n  font-size: 1.3rem;\n  padding: 4px;\n}\n\n.btn {\n  margin: 40px 0;\n}\n\n.counter {\n  text-align: start;\n  font-weight: 700;\n  margin-bottom: 20px;\n  display: none;\n}\n\n.counter span {\n  color: rgb(87, 87, 247);\n}\n\n.resultado {\n  font-size: 1.2rem;\n  text-align: start;\n  font-family: Georgia, 'Times New Roman', Times, serif;\n}\n\n.stringSelect {\n  font-weight: bold;\n  color: rgb(87, 87, 247);\n  font-size: 1.1em;\n}","",{version:3,sources:["webpack://./src/assets/css/styleRegex.css"],names:[],mappings:"AAAA;EACE,iBAAiB;AACnB;;AAEA;EACE,UAAU;EACV,iBAAiB;EACjB,YAAY;AACd;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,iBAAiB;EACjB,gBAAgB;EAChB,mBAAmB;EACnB,aAAa;AACf;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,iBAAiB;EACjB,iBAAiB;EACjB,qDAAqD;AACvD;;AAEA;EACE,iBAAiB;EACjB,uBAAuB;EACvB,gBAAgB;AAClB",sourcesContent:[".divInputRegex {\n  text-align: start;\n}\n\n#inputRegex {\n  width: 50%;\n  font-size: 1.3rem;\n  padding: 4px;\n}\n\n.btn {\n  margin: 40px 0;\n}\n\n.counter {\n  text-align: start;\n  font-weight: 700;\n  margin-bottom: 20px;\n  display: none;\n}\n\n.counter span {\n  color: rgb(87, 87, 247);\n}\n\n.resultado {\n  font-size: 1.2rem;\n  text-align: start;\n  font-family: Georgia, 'Times New Roman', Times, serif;\n}\n\n.stringSelect {\n  font-weight: bold;\n  color: rgb(87, 87, 247);\n  font-size: 1.1em;\n}"],sourceRoot:""}]);const s=i},645:n=>{"use strict";n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e="",r=void 0!==t[5];return t[4]&&(e+="@supports (".concat(t[4],") {")),t[2]&&(e+="@media ".concat(t[2]," {")),r&&(e+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),e+=n(t),r&&(e+="}"),t[2]&&(e+="}"),t[4]&&(e+="}"),e})).join("")},t.i=function(n,e,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var A=0;A<n.length;A++){var l=[].concat(n[A]);r&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),e&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=e):l[2]=e),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),t.push(l))}},t}},537:n=>{"use strict";n.exports=function(n){var t=n[1],e=n[3];if(!e)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},666:n=>{var t=function(n){"use strict";var t,e=Object.prototype,r=e.hasOwnProperty,o=Object.defineProperty||function(n,t,e){n[t]=e.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function A(n,t,e){return Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}),n[t]}try{A({},"")}catch(n){A=function(n,t,e){return n[t]=e}}function l(n,t,e,r){var a=t&&t.prototype instanceof m?t:m,i=Object.create(a.prototype),s=new T(r||[]);return o(i,"_invoke",{value:k(n,e,s)}),i}function u(n,t,e){try{return{type:"normal",arg:n.call(t,e)}}catch(n){return{type:"throw",arg:n}}}n.wrap=l;var p="suspendedStart",d="suspendedYield",f="executing",h="completed",g={};function m(){}function E(){}function x(){}var v={};A(v,i,(function(){return this}));var y=Object.getPrototypeOf,C=y&&y(y(z([])));C&&C!==e&&r.call(C,i)&&(v=C);var B=x.prototype=m.prototype=Object.create(v);function b(n){["next","throw","return"].forEach((function(t){A(n,t,(function(n){return this._invoke(t,n)}))}))}function w(n,t){function e(o,a,i,s){var c=u(n[o],n,a);if("throw"!==c.type){var A=c.arg,l=A.value;return l&&"object"==typeof l&&r.call(l,"__await")?t.resolve(l.__await).then((function(n){e("next",n,i,s)}),(function(n){e("throw",n,i,s)})):t.resolve(l).then((function(n){A.value=n,i(A)}),(function(n){return e("throw",n,i,s)}))}s(c.arg)}var a;o(this,"_invoke",{value:function(n,r){function o(){return new t((function(t,o){e(n,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(n,e,r){var o=p;return function(a,i){if(o===f)throw new Error("Generator is already running");if(o===h){if("throw"===a)throw i;return{value:t,done:!0}}for(r.method=a,r.arg=i;;){var s=r.delegate;if(s){var c=L(s,r);if(c){if(c===g)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===p)throw o=h,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=f;var A=u(n,e,r);if("normal"===A.type){if(o=r.done?h:d,A.arg===g)continue;return{value:A.arg,done:r.done}}"throw"===A.type&&(o=h,r.method="throw",r.arg=A.arg)}}}function L(n,e){var r=e.method,o=n.iterator[r];if(o===t)return e.delegate=null,"throw"===r&&n.iterator.return&&(e.method="return",e.arg=t,L(n,e),"throw"===e.method)||"return"!==r&&(e.method="throw",e.arg=new TypeError("The iterator does not provide a '"+r+"' method")),g;var a=u(o,n.iterator,e.arg);if("throw"===a.type)return e.method="throw",e.arg=a.arg,e.delegate=null,g;var i=a.arg;return i?i.done?(e[n.resultName]=i.value,e.next=n.nextLoc,"return"!==e.method&&(e.method="next",e.arg=t),e.delegate=null,g):i:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,g)}function j(n){var t={tryLoc:n[0]};1 in n&&(t.catchLoc=n[1]),2 in n&&(t.finallyLoc=n[2],t.afterLoc=n[3]),this.tryEntries.push(t)}function S(n){var t=n.completion||{};t.type="normal",delete t.arg,n.completion=t}function T(n){this.tryEntries=[{tryLoc:"root"}],n.forEach(j,this),this.reset(!0)}function z(n){if(n||""===n){var e=n[i];if(e)return e.call(n);if("function"==typeof n.next)return n;if(!isNaN(n.length)){var o=-1,a=function e(){for(;++o<n.length;)if(r.call(n,o))return e.value=n[o],e.done=!1,e;return e.value=t,e.done=!0,e};return a.next=a}}throw new TypeError(typeof n+" is not iterable")}return E.prototype=x,o(B,"constructor",{value:x,configurable:!0}),o(x,"constructor",{value:E,configurable:!0}),E.displayName=A(x,c,"GeneratorFunction"),n.isGeneratorFunction=function(n){var t="function"==typeof n&&n.constructor;return!!t&&(t===E||"GeneratorFunction"===(t.displayName||t.name))},n.mark=function(n){return Object.setPrototypeOf?Object.setPrototypeOf(n,x):(n.__proto__=x,A(n,c,"GeneratorFunction")),n.prototype=Object.create(B),n},n.awrap=function(n){return{__await:n}},b(w.prototype),A(w.prototype,s,(function(){return this})),n.AsyncIterator=w,n.async=function(t,e,r,o,a){void 0===a&&(a=Promise);var i=new w(l(t,e,r,o),a);return n.isGeneratorFunction(e)?i:i.next().then((function(n){return n.done?n.value:i.next()}))},b(B),A(B,c,"Generator"),A(B,i,(function(){return this})),A(B,"toString",(function(){return"[object Generator]"})),n.keys=function(n){var t=Object(n),e=[];for(var r in t)e.push(r);return e.reverse(),function n(){for(;e.length;){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},n.values=z,T.prototype={constructor:T,reset:function(n){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(S),!n)for(var e in this)"t"===e.charAt(0)&&r.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=t)},stop:function(){this.done=!0;var n=this.tryEntries[0].completion;if("throw"===n.type)throw n.arg;return this.rval},dispatchException:function(n){if(this.done)throw n;var e=this;function o(r,o){return s.type="throw",s.arg=n,e.next=r,o&&(e.method="next",e.arg=t),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],s=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),A=r.call(i,"finallyLoc");if(c&&A){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!A)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(n,t){for(var e=this.tryEntries.length-1;e>=0;--e){var o=this.tryEntries[e];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===n||"continue"===n)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=n,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,g):this.complete(i)},complete:function(n,t){if("throw"===n.type)throw n.arg;return"break"===n.type||"continue"===n.type?this.next=n.arg:"return"===n.type?(this.rval=this.arg=n.arg,this.method="return",this.next="end"):"normal"===n.type&&t&&(this.next=t),g},finish:function(n){for(var t=this.tryEntries.length-1;t>=0;--t){var e=this.tryEntries[t];if(e.finallyLoc===n)return this.complete(e.completion,e.afterLoc),S(e),g}},catch:function(n){for(var t=this.tryEntries.length-1;t>=0;--t){var e=this.tryEntries[t];if(e.tryLoc===n){var r=e.completion;if("throw"===r.type){var o=r.arg;S(e)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(n,e,r){return this.delegate={iterator:z(n),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=t),g}},n}(n.exports);try{regeneratorRuntime=t}catch(n){"object"==typeof globalThis?globalThis.regeneratorRuntime=t:Function("r","regeneratorRuntime = r")(t)}},379:n=>{"use strict";var t=[];function e(n){for(var e=-1,r=0;r<t.length;r++)if(t[r].identifier===n){e=r;break}return e}function r(n,r){for(var a={},i=[],s=0;s<n.length;s++){var c=n[s],A=r.base?c[0]+r.base:c[0],l=a[A]||0,u="".concat(A," ").concat(l);a[A]=l+1;var p=e(u),d={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)t[p].references++,t[p].updater(d);else{var f=o(d,r);r.byIndex=s,t.splice(s,0,{identifier:u,updater:f,references:1})}i.push(u)}return i}function o(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap&&t.supports===n.supports&&t.layer===n.layer)return;e.update(n=t)}else e.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var s=e(a[i]);t[s].references--}for(var c=r(n,o),A=0;A<a.length;A++){var l=e(a[A]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}a=c}}},569:n=>{"use strict";var t={};n.exports=function(n,e){var r=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}},216:n=>{"use strict";n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t,n.options),t}},565:(n,t,e)=>{"use strict";n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},795:n=>{"use strict";n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var r="";e.supports&&(r+="@supports (".concat(e.supports,") {")),e.media&&(r+="@media ".concat(e.media," {"));var o=void 0!==e.layer;o&&(r+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),r+=e.css,o&&(r+="}"),e.media&&(r+="}"),e.supports&&(r+="}");var a=e.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,n,t.options)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},589:n=>{"use strict";n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}}},t={};function e(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={id:r,exports:{}};return n[r](a,a.exports,e),a.exports}e.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},e.d=(n,t)=>{for(var r in t)e.o(t,r)&&!e.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:t[r]})},e.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),e.nc=void 0,(()=>{"use strict";e(666);var n=e(379),t=e.n(n),r=e(795),o=e.n(r),a=e(569),i=e.n(a),s=e(565),c=e.n(s),A=e(216),l=e.n(A),u=e(589),p=e.n(u),d=e(953),f={};f.styleTagTransform=p(),f.setAttributes=c(),f.insert=i().bind(null,"head"),f.domAPI=o(),f.insertStyleElement=l(),t()(d.Z,f),d.Z&&d.Z.locals&&d.Z.locals;var h=e(234),g={};g.styleTagTransform=p(),g.setAttributes=c(),g.insert=i().bind(null,"head"),g.domAPI=o(),g.insertStyleElement=l(),t()(h.Z,g),h.Z&&h.Z.locals&&h.Z.locals;var m=e(236),E={};E.styleTagTransform=p(),E.setAttributes=c(),E.insert=i().bind(null,"head"),E.domAPI=o(),E.insertStyleElement=l(),t()(m.Z,E),m.Z&&m.Z.locals&&m.Z.locals;var x,v,y,C,B,b,w,k,L,j,S,T,z=window.location.href;z.includes("index")&&(x=document.querySelector("#texto"),v=document.querySelector(".btn"),y=document.querySelector("#consult"),C=document.querySelector(".alertas"),B=document.querySelector(".result"),v.addEventListener("click",(function(){var n,t,e,r,o,a;(x.value?(C.style.display="none",1):(C.style.display="block",C.textContent="Digite algum texto",0))&&(n=new RegExp(y.value,"gi"),a="vez",(o=x.value.match(n).length)>1&&(a="vezes"),t='\n  <div>\n    <span>Sua palavra ocorre <span class="numbers">'.concat(o,"</span> ").concat(a," </span>\n  </div>\n  "),e=function(n){return'\n  <div>\n    <span>Total de Caracteres: </span>\n    <span class="numbers" id="allCaracter">'.concat(n,"</span>\n  </div>\n  ")}(x.value.length),r=function(n){return'\n  <div>\n    <span>Total de Palavras: </span>\n    <span class="numbers" id="allWords">'.concat(n,"</span>\n  </div>\n  ")}(x.value.match(/\w+/gi).length),B.innerHTML="<h2>Resultados:</h2>",y.value?B.innerHTML+=t+e+r:B.innerHTML+=e+r)}))),z.includes("regex")&&(b=document.querySelector("#texto"),w=document.querySelector("#inputRegex"),k=document.querySelector(".counter span"),L=document.querySelector(".resultado"),j=document.querySelector(".btn"),S=document.querySelector(".alertas"),T=function(){var n,t=w.value.split("/"),e=new RegExp(t[1],t[2]),r=b.value.match(e);r&&w.value?k.textContent="".concat(r.length):k.textContent="0",k.parentElement.style.display="block",n=b.value.replace(e,'<span class="stringSelect">'.concat("$&","</span>")),L.innerHTML=n},j.addEventListener("click",(function(){(b.value?(S.style.display="none",1):(S.textContent="Digite algum texto",S.style.display="block",0))&&T()})))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,